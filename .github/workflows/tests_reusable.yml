on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
    secrets:
      USE_EMAIL:
        required: true
      USE_API_HOST:
        required: true
      USE_PASSWORD:
        required: true

env:
  GO_VERSION: '1.20'

jobs:
  # CLI must build without failure
  build:
    name: Build
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}

      - name: Build
        run: |
          go build -v .

  # Linting must not find any problems
  golangci:
    name: Lint
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Lint (golangci-lint)
        uses: golangci/golangci-lint-action@v3.7.0
        with:
          version: latest

  # Generating the docs using Cobra will fail if any flags are in conflict
  flag_conflicts:
    name: Check for flag conflicts
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Check for flag conflicts
        run: |
          ./scripts/docs/gen_markdown.sh

  # Run shellspec tests
  test:
    name: Test
    runs-on: self-hosted
    needs: [build,golangci,flag_conflicts]
    timeout-minutes: 60
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install shellspec
        run: |
          set -o pipefail
          curl -fsSL "https://github.com/shellspec/shellspec/raw/master/install.sh" | sh -s 0.28.1 -y
          sudo apt install -y jq

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}

      - name: Build
        run: |
          export GOPATH=$(go env GOPATH)
          export PATH=$PATH:$GOPATH/bin
          make install
      - name: Run shellspec
        env:
          # Endpoint and login, set by parent workflow.
          TAIKUN_API_HOST: ${{ (inputs.endpoint == 'staging') && secrets.TAIKUN_STAGING_API_HOST || secrets.TAIKUN_API_HOST }}
          TAIKUN_EMAIL: ${{ (inputs.endpoint == 'staging') && secrets.TAIKUN_STAGING_EMAIL || secrets.TAIKUN_EMAIL }}
          TAIKUN_PASSWORD: ${{ (inputs.endpoint == 'staging') && secrets.TAIKUN_STAGING_PASSWORD || secrets.TAIKUN_PASSWORD }}

          # Set in secrets in GitHub
          ARM_AZ_COUNT: 1
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_LOCATION: northeurope
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_AZ_COUNT: 1
          AWS_DEFAULT_REGION: eu-central-1
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}

          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
          AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
          AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }}
          AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
          AZ_COUNT: 1

          OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
          OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
          OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
          OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
          OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
          OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
          OS_USERNAME: ${{ secrets.OS_USERNAME }}

          PROMETHEUS_PASSWORD: ${{ secrets.PROMETHEUS_PASSWORD }}
          PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}
          PROMETHEUS_USERNAME: ${{ secrets.PROMETHEUS_USERNAME }}

          S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          S3_REGION: ${{ secrets.S3_REGION }}

          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_FEEDBACK: ${{ secrets.SLACK_WEBHOOK_FEEDBACK }}
          CI_JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

        run: |
          echo $CI_JOB_URL
          shellspec --shell bash --format tap --jobs $(nproc) | tee shellspec.log
          echo 'Rerunning failed tests:'
          if ./scripts/tests/rerun_failed_tests.sh shellspec.log; then exit 0; else curl -i -X POST -H "Content-Type: application/json" -d '{"username":"CLI-TEST", "text":"CLI tests FAILED\n'"$CI_JOB_URL"'"}' $SLACK_WEBHOOK_FEEDBACK; exit 1; fi
